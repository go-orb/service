// Code generated by protoc-gen-go-orb-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-orb  v0.0.1
// - protoc             v5.29.2
// source: httpgateway_v1/httpgateway.proto

package httpgateway_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HttpGateway_AddRoutes_FullMethodName    = "/httpgateway.v1.HttpGateway/AddRoutes"
	HttpGateway_SetRoutes_FullMethodName    = "/httpgateway.v1.HttpGateway/SetRoutes"
	HttpGateway_RemoveRoutes_FullMethodName = "/httpgateway.v1.HttpGateway/RemoveRoutes"
)

// HttpGatewayServer is the server API for HttpGateway service.
// All implementations should embed UnimplementedHttpGatewayServer
// for forward compatibility.
type HttpGatewayServer interface {
	AddRoutes(context.Context, *Routes) (*emptypb.Empty, error)
	SetRoutes(context.Context, *Routes) (*emptypb.Empty, error)
	RemoveRoutes(context.Context, *Paths) (*emptypb.Empty, error)
}

// UnimplementedHttpGatewayServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHttpGatewayServer struct{}

func (UnimplementedHttpGatewayServer) AddRoutes(context.Context, *Routes) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoutes not implemented")
}
func (UnimplementedHttpGatewayServer) SetRoutes(context.Context, *Routes) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRoutes not implemented")
}
func (UnimplementedHttpGatewayServer) RemoveRoutes(context.Context, *Paths) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRoutes not implemented")
}
func (UnimplementedHttpGatewayServer) testEmbeddedByValue() {}

// UnsafeHttpGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HttpGatewayServer will
// result in compilation errors.
type UnsafeHttpGatewayServer interface {
	mustEmbedUnimplementedHttpGatewayServer()
}

func registerHttpGatewayGRPCHandler(s grpc.ServiceRegistrar, srv HttpGatewayServer) {
	// If the following call panics, it indicates UnimplementedHttpGatewayServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HttpGateway_ServiceDesc, srv)
}

func _HttpGateway_AddRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Routes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpGatewayServer).AddRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HttpGateway_AddRoutes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpGatewayServer).AddRoutes(ctx, req.(*Routes))
	}
	return interceptor(ctx, in, info, handler)
}

func _HttpGateway_SetRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Routes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpGatewayServer).SetRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HttpGateway_SetRoutes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpGatewayServer).SetRoutes(ctx, req.(*Routes))
	}
	return interceptor(ctx, in, info, handler)
}

func _HttpGateway_RemoveRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Paths)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpGatewayServer).RemoveRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HttpGateway_RemoveRoutes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpGatewayServer).RemoveRoutes(ctx, req.(*Paths))
	}
	return interceptor(ctx, in, info, handler)
}

// HttpGateway_ServiceDesc is the grpc.ServiceDesc for HttpGateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HttpGateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "httpgateway.v1.HttpGateway",
	HandlerType: (*HttpGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRoutes",
			Handler:    _HttpGateway_AddRoutes_Handler,
		},
		{
			MethodName: "SetRoutes",
			Handler:    _HttpGateway_SetRoutes_Handler,
		},
		{
			MethodName: "RemoveRoutes",
			Handler:    _HttpGateway_RemoveRoutes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "httpgateway_v1/httpgateway.proto",
}
