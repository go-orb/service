// Code generated by protoc-gen-go-orb. DO NOT EDIT.
//
// version:
// - protoc-gen-go-orb        v0.0.1
// - protoc                   v5.29.2
//
// Proto source: httpgateway_v1/httpgateway.proto

package httpgateway_v1

import (
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

import (
	"context"

	"github.com/go-orb/go-orb/client"
	"github.com/go-orb/go-orb/log"
	"github.com/go-orb/go-orb/server"

	grpc "google.golang.org/grpc"
)

// HandlerHttpGateway is the name of a service, it's here to static type/reference.
const HandlerHttpGateway = "httpgateway.v1.HttpGateway"
const EndpointHttpGatewayAddRoutes = "/httpgateway.v1.HttpGateway/AddRoutes"
const EndpointHttpGatewaySetRoutes = "/httpgateway.v1.HttpGateway/SetRoutes"
const EndpointHttpGatewayRemoveRoutes = "/httpgateway.v1.HttpGateway/RemoveRoutes"

// HttpGatewayClient is the client for httpgateway.v1.HttpGateway
type HttpGatewayClient struct {
	client client.Client
}

// NewHttpGatewayClient creates a new client for httpgateway.v1.HttpGateway
func NewHttpGatewayClient(client client.Client) *HttpGatewayClient {
	return &HttpGatewayClient{client: client}
}

// AddRoutes requests AddRoutes.
func (c *HttpGatewayClient) AddRoutes(ctx context.Context, service string, req *Routes, opts ...client.CallOption) (*emptypb.Empty, error) {
	return client.Request[emptypb.Empty](ctx, c.client, service, EndpointHttpGatewayAddRoutes, req, opts...)
}

// SetRoutes requests SetRoutes.
func (c *HttpGatewayClient) SetRoutes(ctx context.Context, service string, req *Routes, opts ...client.CallOption) (*emptypb.Empty, error) {
	return client.Request[emptypb.Empty](ctx, c.client, service, EndpointHttpGatewaySetRoutes, req, opts...)
}

// RemoveRoutes requests RemoveRoutes.
func (c *HttpGatewayClient) RemoveRoutes(ctx context.Context, service string, req *Paths, opts ...client.CallOption) (*emptypb.Empty, error) {
	return client.Request[emptypb.Empty](ctx, c.client, service, EndpointHttpGatewayRemoveRoutes, req, opts...)
}

// HttpGatewayHandler is the Handler for httpgateway.v1.HttpGateway
type HttpGatewayHandler interface {
	AddRoutes(ctx context.Context, req *Routes) (*emptypb.Empty, error)

	SetRoutes(ctx context.Context, req *Routes) (*emptypb.Empty, error)

	RemoveRoutes(ctx context.Context, req *Paths) (*emptypb.Empty, error)
}

// RegisterHttpGatewayHandler will return a registration function that can be
// provided to entrypoints as a handler registration.
func RegisterHttpGatewayHandler(handler HttpGatewayHandler) server.RegistrationFunc {
	return func(s any) {
		switch srv := s.(type) {

		case grpc.ServiceRegistrar:
			registerHttpGatewayGRPCHandler(srv, handler)
		default:
			log.Warn("No provider for this server found", "proto", "httpgateway_v1/httpgateway.proto", "handler", "HttpGateway", "server", s)
		}
	}
}
