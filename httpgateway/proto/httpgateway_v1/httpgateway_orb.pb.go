// Code generated by protoc-gen-go-orb. DO NOT EDIT.
//
// version:
// - protoc-gen-go-orb        v0.0.1
// - protoc                   v5.29.2
//
// Proto source: httpgateway_v1/httpgateway.proto

package httpgateway_v1

import (
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

import (
	"context"
	"fmt"

	"github.com/go-orb/go-orb/client"
	"github.com/go-orb/go-orb/log"
	"github.com/go-orb/go-orb/server"

	"google.golang.org/protobuf/proto"
	"storj.io/drpc"

	grpc "google.golang.org/grpc"

	mdrpc "github.com/go-orb/plugins/server/drpc"
	memory "github.com/go-orb/plugins/server/memory"
)

// HandlerHttpGateway is the name of a service, it's here to static type/reference.
const HandlerHttpGateway = "httpgateway.v1.HttpGateway"
const EndpointHttpGatewayAddRoutes = "/httpgateway.v1.HttpGateway/AddRoutes"
const EndpointHttpGatewaySetRoutes = "/httpgateway.v1.HttpGateway/SetRoutes"
const EndpointHttpGatewayRemoveRoutes = "/httpgateway.v1.HttpGateway/RemoveRoutes"

// orbEncoding_HttpGateway_proto is a protobuf encoder for the httpgateway.v1.HttpGateway service.
type orbEncoding_HttpGateway_proto struct{}

// Marshal implements the drpc.Encoding interface.
func (orbEncoding_HttpGateway_proto) Marshal(msg drpc.Message) ([]byte, error) {
	m, ok := msg.(proto.Message)
	if !ok {
		return nil, fmt.Errorf("message is not a proto.Message: %T", msg)
	}
	return proto.Marshal(m)
}

// Unmarshal implements the drpc.Encoding interface.
func (orbEncoding_HttpGateway_proto) Unmarshal(data []byte, msg drpc.Message) error {
	m, ok := msg.(proto.Message)
	if !ok {
		return fmt.Errorf("message is not a proto.Message: %T", msg)
	}
	return proto.Unmarshal(data, m)
}

// Name implements the drpc.Encoding interface.
func (orbEncoding_HttpGateway_proto) Name() string {
	return "proto"
}

// HttpGatewayClient is the client for httpgateway.v1.HttpGateway
type HttpGatewayClient struct {
	client client.Client
}

// NewHttpGatewayClient creates a new client for httpgateway.v1.HttpGateway
func NewHttpGatewayClient(client client.Client) *HttpGatewayClient {
	return &HttpGatewayClient{client: client}
}

// AddRoutes requests AddRoutes.
func (c *HttpGatewayClient) AddRoutes(ctx context.Context, service string, req *Routes, opts ...client.CallOption) (*emptypb.Empty, error) {
	return client.Request[emptypb.Empty](ctx, c.client, service, EndpointHttpGatewayAddRoutes, req, opts...)
}

// SetRoutes requests SetRoutes.
func (c *HttpGatewayClient) SetRoutes(ctx context.Context, service string, req *Routes, opts ...client.CallOption) (*emptypb.Empty, error) {
	return client.Request[emptypb.Empty](ctx, c.client, service, EndpointHttpGatewaySetRoutes, req, opts...)
}

// RemoveRoutes requests RemoveRoutes.
func (c *HttpGatewayClient) RemoveRoutes(ctx context.Context, service string, req *Paths, opts ...client.CallOption) (*emptypb.Empty, error) {
	return client.Request[emptypb.Empty](ctx, c.client, service, EndpointHttpGatewayRemoveRoutes, req, opts...)
}

// HttpGatewayHandler is the Handler for httpgateway.v1.HttpGateway
type HttpGatewayHandler interface {
	AddRoutes(ctx context.Context, req *Routes) (*emptypb.Empty, error)

	SetRoutes(ctx context.Context, req *Routes) (*emptypb.Empty, error)

	RemoveRoutes(ctx context.Context, req *Paths) (*emptypb.Empty, error)
}

// orbGRPCHttpGateway provides the adapter to convert a HttpGatewayHandler to a gRPC HttpGatewayServer.
type orbGRPCHttpGateway struct {
	handler HttpGatewayHandler
}

// AddRoutes implements the HttpGatewayServer interface by adapting to the HttpGatewayHandler.
func (s *orbGRPCHttpGateway) AddRoutes(ctx context.Context, req *Routes) (*emptypb.Empty, error) {
	return s.handler.AddRoutes(ctx, req)
}

// SetRoutes implements the HttpGatewayServer interface by adapting to the HttpGatewayHandler.
func (s *orbGRPCHttpGateway) SetRoutes(ctx context.Context, req *Routes) (*emptypb.Empty, error) {
	return s.handler.SetRoutes(ctx, req)
}

// RemoveRoutes implements the HttpGatewayServer interface by adapting to the HttpGatewayHandler.
func (s *orbGRPCHttpGateway) RemoveRoutes(ctx context.Context, req *Paths) (*emptypb.Empty, error) {
	return s.handler.RemoveRoutes(ctx, req)
}

// Stream adapters to convert gRPC streams to ORB streams.

// Verification that our adapters implement the required interfaces.
var _ HttpGatewayServer = (*orbGRPCHttpGateway)(nil)

// registerHttpGatewayGRPCServerHandler registers the service to a gRPC server.
func registerHttpGatewayGRPCServerHandler(srv grpc.ServiceRegistrar, handler HttpGatewayHandler) {
	// Create the adapter to convert from HttpGatewayHandler to HttpGatewayServer
	grpcHandler := &orbGRPCHttpGateway{handler: handler}

	srv.RegisterService(&HttpGateway_ServiceDesc, grpcHandler)
}

// orbDRPCHttpGatewayHandler wraps a HttpGatewayHandler to implement DRPCHttpGatewayServer.
type orbDRPCHttpGatewayHandler struct {
	handler HttpGatewayHandler
}

// AddRoutes implements the DRPCHttpGatewayServer interface by adapting to the HttpGatewayHandler.
func (w *orbDRPCHttpGatewayHandler) AddRoutes(ctx context.Context, req *Routes) (*emptypb.Empty, error) {
	return w.handler.AddRoutes(ctx, req)
}

// SetRoutes implements the DRPCHttpGatewayServer interface by adapting to the HttpGatewayHandler.
func (w *orbDRPCHttpGatewayHandler) SetRoutes(ctx context.Context, req *Routes) (*emptypb.Empty, error) {
	return w.handler.SetRoutes(ctx, req)
}

// RemoveRoutes implements the DRPCHttpGatewayServer interface by adapting to the HttpGatewayHandler.
func (w *orbDRPCHttpGatewayHandler) RemoveRoutes(ctx context.Context, req *Paths) (*emptypb.Empty, error) {
	return w.handler.RemoveRoutes(ctx, req)
}

// Stream adapters to convert DRPC streams to ORB streams.

// Verification that our adapters implement the required interfaces.
var _ DRPCHttpGatewayServer = (*orbDRPCHttpGatewayHandler)(nil)

// registerHttpGatewayDRPCHandler registers the service to an dRPC server.
func registerHttpGatewayDRPCHandler(srv *mdrpc.Server, handler HttpGatewayHandler) error {
	desc := DRPCHttpGatewayDescription{}

	// Wrap the ORB handler with our adapter to make it compatible with DRPC.
	drpcHandler := &orbDRPCHttpGatewayHandler{handler: handler}

	// Register with the server/drpc(.Mux).
	err := srv.Router().Register(drpcHandler, desc)
	if err != nil {
		return err
	}

	// Add each endpoint name of this handler to the orb drpc server.
	srv.AddEndpoint("/httpgateway.v1.HttpGateway/AddRoutes")
	srv.AddEndpoint("/httpgateway.v1.HttpGateway/SetRoutes")
	srv.AddEndpoint("/httpgateway.v1.HttpGateway/RemoveRoutes")

	return nil
}

// registerHttpGatewayMemoryHandler registers the service to a memory server.
func registerHttpGatewayMemoryHandler(srv *memory.Server, handler HttpGatewayHandler) error {
	desc := DRPCHttpGatewayDescription{}

	// Wrap the ORB handler with our adapter to make it compatible with DRPC.
	drpcHandler := &orbDRPCHttpGatewayHandler{handler: handler}

	// Register with the server/drpc(.Mux).
	err := srv.Router().Register(drpcHandler, desc)
	if err != nil {
		return err
	}

	// Add each endpoint name of this handler to the orb drpc server.
	srv.AddEndpoint("/httpgateway.v1.HttpGateway/AddRoutes")
	srv.AddEndpoint("/httpgateway.v1.HttpGateway/SetRoutes")
	srv.AddEndpoint("/httpgateway.v1.HttpGateway/RemoveRoutes")

	return nil
}

// RegisterHttpGatewayHandler will return a registration function that can be
// provided to entrypoints as a handler registration.
func RegisterHttpGatewayHandler(handler any) server.RegistrationFunc {
	return func(s any) {
		switch srv := s.(type) {

		case grpc.ServiceRegistrar:
			registerHttpGatewayGRPCServerHandler(srv, handler.(HttpGatewayHandler))
		case *mdrpc.Server:
			registerHttpGatewayDRPCHandler(srv, handler.(HttpGatewayHandler))
		case *memory.Server:
			registerHttpGatewayMemoryHandler(srv, handler.(HttpGatewayHandler))
		default:
			log.Warn("No provider for this server found", "proto", "httpgateway_v1/httpgateway.proto", "handler", "HttpGateway", "server", s)
		}
	}
}
